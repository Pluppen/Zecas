---
import "@/styles/global.css";
import Layout from "@/layouts/Layout.astro";

import { extractSessionCookie } from "@/lib/utils";
import { getTargetById, getTargetServices, getTargetRelations, type Target, type TargetRelation } from "@/lib/api/targets";
import { getProjectTargets } from "@/lib/api/projects";
import type { Service } from "@/lib/api/services";

const { targetId } = Astro.params;

if (!targetId) {
    Astro.redirect("/");
    return
}

const sessionToken = extractSessionCookie(Astro);
const target = await getTargetById(targetId, sessionToken);

const targets: Target[] = await getProjectTargets(target.project_id, sessionToken);
const targetsMap: Record<string, Target> = {}
targets.forEach(t => {
    if (t.id) {
        targetsMap[t.id] = t;
    }
})
const services: Service[] = await getTargetServices(targetId, sessionToken);
const servicesMap: Record<string, Service> = {}
services.forEach(s => {
    if (s.id) {
        servicesMap[s.id] = s;
    }
})
const relations: TargetRelation[] = await getTargetRelations(targetId, sessionToken);
---

<Layout breadcrumbL1="Targets" breadcrumbL2={target.value} breadcrumbL1Href="/project/targets/overview">
    <div class="container mx-auto mt-8">
        <h1 class="text-2xl mb-2">Target Information</h1>
        <p>Target: <span class="bg-muted px-1">{target.value}</span></p>

        <h2 class="text-lg mt-4">Related targets</h2>
        <div>
        {relations.map(r => (
            <div>
                <p><a class="" href={`/targets/${targetsMap[r.source_id].id}`}>{targetsMap[r.source_id].value}</a> {r.relation_type} <a href={`/targets/${targetsMap[r.destination_id].id}`}>{targetsMap[r.destination_id].value}</a></p>
            </div>
        ))}
        </div>

        <h2 class="text-lg mt-4">Metadata:</h2>
        <pre class="bg-muted text-sm p-4 text-wrap">{JSON.stringify(target.metadata, null, 2)}</pre>
    </div>
</Layout>